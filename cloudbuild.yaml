steps:
# Build the combined frontend and backend container image
# Use the root Dockerfile and the entire project directory as context
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/treepro-ai-app:$COMMIT_SHA', '.', '-f', 'Dockerfile'] # Changed Dockerfile path

# Push the container image to Container Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/treepro-ai-app:$COMMIT_SHA']

# Deploy container image to Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
  - 'run'
  - 'deploy'
  - 'treepro-ai-app' # New Cloud Run service name (or keep old if preferred)
  - '--image'
  - 'gcr.io/$PROJECT_ID/treepro-ai-app:$COMMIT_SHA'
  - '--region'
  - 'us-central1' # Your preferred region
  - '--platform'
  - 'managed'
  - '--allow-unauthenticated' # Allows public access - review security needs
  # Cloud Run defaults to port 8080, which matches our server.js
  # Remove the explicit --port unless you change the default in server.js
  # IMPORTANT: Set database environment variables here or via Secret Manager
  - '--set-env-vars'
  - '^##^DATABASE_URL=postgresql://postgres:Dk126977!@HOST:PORT/DATABASE##NODE_ENV=production' # Use Cloud Run's format (^##^); Added NODE_ENV
  # Add other necessary env vars like GEMINI_API_KEY
  # - '--set-env-vars=GEMINI_API_KEY=YOUR_API_KEY_HERE' # Or use secrets

images:
- 'gcr.io/$PROJECT_ID/treepro-ai-app:$COMMIT_SHA'

options:
  logging: CLOUD_LOGGING_ONLY