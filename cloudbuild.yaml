steps:
# Build the combined frontend and backend container image
# Use the backend Dockerfile and the entire project directory as context
- name: 'gcr.io/cloud-builders/docker'
  # Point explicitly to the backend Dockerfile
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/treepro-ai-app:$COMMIT_SHA', '.', '-f', 'backend/Dockerfile'] # Corrected Dockerfile path

# Push the container image to Container Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/treepro-ai-app:$COMMIT_SHA']

# Deploy container image to Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
  - 'run'
  - 'deploy'
  - 'treepro-ai-app' # Cloud Run service name
  - '--image'
  - 'gcr.io/$PROJECT_ID/treepro-ai-app:$COMMIT_SHA'
  - '--region'
  - 'us-central1' # Your preferred region
  - '--platform'
  - 'managed'
  - '--allow-unauthenticated' # Allows public access - review security needs
  # Cloud Run injects PORT=8080 by default, which our server.js uses
  # IMPORTANT: Set database environment variables here or via Secret Manager
  - '--set-env-vars'
  # Ensure ^##^ delimiters are used correctly
  - '^##^DATABASE_URL=postgresql://postgres:Dk126977!@34.16.6.71:5432/postgres##NODE_ENV=production' # Replace with actual or use Secret Manager
  # Add other necessary env vars like GEMINI_API_KEY
  # - '--update-secrets=GEMINI_API_KEY=your-secret-name:latest' # Example using Secret Manager

images:
- 'gcr.io/$PROJECT_ID/treepro-ai-app:$COMMIT_SHA'

options:
  logging: CLOUD_LOGGING_ONLY